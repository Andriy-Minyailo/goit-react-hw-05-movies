{"version":3,"file":"static/js/134.199975ba.chunk.js","mappings":"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","sources":["components/ListMovies/ListMovies.jsx","pages/Movies.jsx","requestServer.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n\nexport const ListMovies = ({ arrayMovies }) => {\n  const location = useLocation();\n  return (\n    <nav>\n      {arrayMovies.map(({ id, original_title }) => {\n        return (\n          <NavLink key={id} to={`/movies/${id}`} state={{ from: location }}>\n            {original_title}\n          </NavLink>\n        );\n      })}\n    </nav>\n  );\n};\n","import { ListMovies } from 'components/ListMovies/ListMovies';\nimport { useEffect, useState } from 'react';\nimport {  useSearchParams } from 'react-router-dom';\nimport { RequestServer } from 'requestServer';\n\nconst requestServer = new RequestServer();\n\nconst Movies = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [arraySearchMovies, setArraySearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryValue = searchParams.get('query');\n \n\n  useEffect(() => {\n    if (!queryValue) {\n      return;\n    }\n    const searchMovies = async () => {\n      try {\n        const {\n          data: { results, total_results },\n        } = await requestServer.searchMovies(queryValue);\n        setArraySearchMovies(results);\n        if (!total_results) alert('Not found!');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    searchMovies();\n    setInputValue(queryValue);\n  }, [queryValue]);\n\n  const submitButtonSearch = evt => {\n    evt.preventDefault();\n    if (!inputValue.trim()) {\n      setArraySearchMovies([]);\n      setSearchParams({});\n      alert('Enter data to search!');\n      return;\n    }\n    setSearchParams({ query: inputValue });\n  };\n\n  return (\n    <>\n      <form onSubmit={submitButtonSearch}>\n        <input\n          onChange={({ target: { value } }) => setInputValue(value)}\n          value={inputValue}\n        ></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      {\n        <ListMovies\n          arrayMovies={arraySearchMovies}\n         />\n      }\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport class RequestServer {\n  static url = 'https://api.themoviedb.org/3/';\n  static key = 'ce77ddb03ebd0577ea6b19d0dd53be3c';\n\n  trendingDay() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/day?api_key=${RequestServer.key}`\n    );\n  }\n  trendingWeek() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/week?api_key=${RequestServer.key}`\n    );\n  }\n  newFilms() {\n    return axios.get(\n      `${RequestServer.url}movie/upcoming?api_key=${RequestServer.key}&language=en-US&page=1`\n    );\n  }\n  searchMovies(value) {\n    return axios.get(\n      `${RequestServer.url}search/movie?api_key=${RequestServer.key}&language=en-US&query=${value}`\n    );\n  }\n  movieDetails(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieVideos(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/videos?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieGenre() {\n    return axios.get(\n      `${RequestServer.url}genre/movie/list?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCountries() {\n    return axios.get(\n      `${RequestServer.url}configuration/countries?api_key=${RequestServer.key}`\n    );\n  }\n  movieTrailer(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/videos?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieImage(backdropPath) {\n    return axios.get(`https://image.tmdb.org/t/p/original/${backdropPath}`);\n  }\n  movieReviews(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/reviews?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCast(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/credits?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n}\n"],"names":["ListMovies","arrayMovies","location","useLocation","map","id","original_title","to","state","from","requestServer","RequestServer","useState","inputValue","setInputValue","arraySearchMovies","setArraySearchMovies","useSearchParams","searchParams","setSearchParams","queryValue","get","useEffect","searchMovies","data","results","total_results","alert","console","log","onSubmit","evt","preventDefault","trim","query","onChange","value","target","type","axios","url","key","movieId","backdropPath"],"sourceRoot":""}