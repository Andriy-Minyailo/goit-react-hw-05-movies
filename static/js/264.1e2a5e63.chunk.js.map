{"version":3,"file":"static/js/264.1e2a5e63.chunk.js","mappings":"oOAAaA,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,8BACGA,EAAKC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChC,OACE,2BACE,gBACEC,IACED,EAAY,yCAC0BA,GAD1B,gFAIdE,IAAKH,KAEP,uBAAIA,KACJ,uCAAeD,OAVRD,EAaZ,KAGN,E,kBChBKM,EAAgB,I,OAAIC,GAkC1B,EAhCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,+GAIFP,EAAcQ,UAAUN,GAJtB,gBAGFV,EAHE,EAGViB,KAAQjB,KAEVa,EAAQb,GACRkB,QAAQC,IAAInB,GANA,gDAQZkB,QAAQC,IAAR,MARY,yDAAH,qDAWbJ,GACD,GAAE,CAACL,KAGF,8BACGV,EAAKoB,QACJ,yBACE,SAACrB,EAAD,CAAUC,KAAMA,OAGlB,qEAIP,C,qFCnCYS,EAAb,kFAIE,WACE,OAAOY,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,sCAC6Cb,EAAcc,KAEnE,GARH,0BASE,WACE,OAAOF,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,uCAC8Cb,EAAcc,KAEpE,GAbH,sBAcE,WACE,OAAOF,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,kCACyCb,EAAcc,IADvD,0BAGR,GAlBH,0BAmBE,SAAaC,GACX,OAAOH,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,gCACuCb,EAAcc,IADrD,iCACiFC,GAEzF,GAvBH,0BAwBE,SAAad,GACX,OAAOW,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,iBACwBZ,EADxB,oBAC2CD,EAAcc,IADzD,mBAGR,GA5BH,yBA6BE,SAAYb,GACV,OAAOW,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,iBACwBZ,EADxB,2BACkDD,EAAcc,IADhE,mBAGR,GAjCH,wBAkCE,WACE,OAAOF,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,oCAC2Cb,EAAcc,IADzD,mBAGR,GAtCH,4BAuCE,WACE,OAAOF,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,2CACkDb,EAAcc,KAExE,GA3CH,0BA4CE,SAAab,GACX,OAAOW,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,iBACwBZ,EADxB,2BACkDD,EAAcc,IADhE,mBAGR,GAhDH,wBAiDE,SAAWE,GACT,OAAOJ,EAAAA,EAAAA,IAAA,8CAAiDI,GACzD,GAnDH,0BAoDE,SAAaf,GACX,OAAOW,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,iBACwBZ,EADxB,4BACmDD,EAAcc,IADjE,mBAGR,GAxDH,uBAyDE,SAAUb,GACR,OAAOW,EAAAA,EAAAA,IAAA,UACFZ,EAAca,IADZ,iBACwBZ,EADxB,4BACmDD,EAAcc,IADjE,mBAGR,KA7DH,KAAad,EACJa,IAAM,gCADFb,EAEJc,IAAM,kC","sources":["components/CastList/CastList.jsx","components/Cast/Cast.jsx","requestServer.js"],"sourcesContent":["export const CastList = ({ cast }) => {\n  return (\n    <>\n      {cast.map(({ id, character, name, profile_path }) => {\n        return (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                  : `https://cdn.pixabay.com/photo/2016/12/14/23/08/page-not-found-1907792_150.jpg`\n              }\n              alt={name}\n            />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n    </>\n  );\n};\n","import { CastList } from 'components/CastList/CastList';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RequestServer } from 'requestServer';\n\nconst requestServer = new RequestServer();\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await requestServer.movieCast(movieId);\n        setCast(cast);\n        console.log(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length ? (\n        <ul>\n          <CastList cast={cast} />\n        </ul>\n      ) : (\n        <p>We don't have any acteurs for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport class RequestServer {\n  static url = 'https://api.themoviedb.org/3/';\n  static key = 'ce77ddb03ebd0577ea6b19d0dd53be3c';\n\n  trendingDay() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/day?api_key=${RequestServer.key}`\n    );\n  }\n  trendingWeek() {\n    return axios.get(\n      `${RequestServer.url}trending/movie/week?api_key=${RequestServer.key}`\n    );\n  }\n  newFilms() {\n    return axios.get(\n      `${RequestServer.url}movie/upcoming?api_key=${RequestServer.key}&language=en-US&page=1`\n    );\n  }\n  searchMovies(value) {\n    return axios.get(\n      `${RequestServer.url}search/movie?api_key=${RequestServer.key}&language=en-US&query=${value}`\n    );\n  }\n  movieDetails(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieVideos(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/videos?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieGenre() {\n    return axios.get(\n      `${RequestServer.url}genre/movie/list?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCountries() {\n    return axios.get(\n      `${RequestServer.url}configuration/countries?api_key=${RequestServer.key}`\n    );\n  }\n  movieTrailer(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/videos?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieImage(backdropPath) {\n    return axios.get(`https://image.tmdb.org/t/p/original/${backdropPath}`);\n  }\n  movieReviews(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/reviews?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n  movieCast(movieId) {\n    return axios.get(\n      `${RequestServer.url}movie/${movieId}/credits?api_key=${RequestServer.key}&language=en-US`\n    );\n  }\n}\n"],"names":["CastList","cast","map","id","character","name","profile_path","src","alt","requestServer","RequestServer","movieId","useParams","useState","setCast","useEffect","getCast","movieCast","data","console","log","length","axios","url","key","value","backdropPath"],"sourceRoot":""}